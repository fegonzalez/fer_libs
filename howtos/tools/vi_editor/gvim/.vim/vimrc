""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => PATHOGEN PLUGIN
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"execute pathogen#infect()      " Plugins are handeled in a native way since vim 8.0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                " yo uso vim, no vi
set noerrorbells                " Ring the bell (beep or screen flash) for error messages.
set novisualbell                " No use visual bell instead of beeping. 
set t_vb=                       " The terminal code to display the visual bell is given 
                                " with 't_vb'.  When no beep or flash is wanted,
                                " use ":set vb t_vb=".
set nolazyredraw                " Don't redraw while executing macros
set nomousehide                 " When on, the mouse pointer is hidden when characters are typed.
                                " The mouse pointer is restored when the mouse is moved.
set nospell                     " Don't spell (obvious)
set noswapfile                  " No swap files (obvious)
set nu                          " Line numbers on
set mouse=a                     " Enable the use of the mouse
set shell=/bin/zsh              " Name of the shell to use for ! and :! commands.
set showcmd                     " Show (partial) command in the last line of the screen.
set showmode                    " Display the current mode (Insert, Replace or Visual)
set switchbuf=usetab            " This option controls the behavior when switching between buffers.
set tabpagemax=1000             " Maximum number of tab pages to be opened
set undolevels=1000             " Maximum number of changes that can be undone.
set virtualedit=onemore         " When the 'virtualedit' option contains "onemore" the cursor can move just past
                                " the end of the line.

set viminfo=%,<800,'20,/50,:100,h,f0
"           | |    |   |   |    | |
"           | |    |   |   |    | + file marks 0-9,A-Z 0=NOT stored
"           | |    |   |   |    + disable 'hlsearch' loading viminfo
"           | |    |   |   + command-line history saved
"           | |    |   + search history saved
"           | |    + files marks saved
"           | + lines saved each register (old name for <, vi6.2)
"           + save/restore buffer list

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set guitablabel=%t
"set guioptions-=T               " Hide the toolbar (save buttons ...)
set guifont=Monospace\ 10            " Set font and font size for gui
set background=dark             " When set to "dark", Vim will try to use colors that look good on a
                                " dark background.  When set to "light", Vim will try to use colors that
                                " look good on a light background.  Any other value is illegal.
                                " Vim tries to set the default value according to the terminal used

set cursorline                  " Highlight current line

"set termguicolors            " When on, uses |highlight-guifg| and |highlight-guibg| attributes in
                                " the terminal (thus using 24-bit color). Requires a ISO-8613-3
                                " compatible terminal.

 colorscheme gruvbox
"colorscheme koehler
set laststatus=2

" Status line is managed by vim-airline plugin
"if has('statusline')
"    set laststatus=2
"    set statusline=%02n: 		" Buffer number
"    set statusline+=%<%t\    		" Filename
"    set statusline+=%w%h%m%r 		" Options
"    set statusline+=\ [%{&ff}/%Y]       " filetype
"    set statusline+=\ [%{getcwd()}]     " current dir
"    set statusline+=%=%.(%l/%L:%c%)  	" Right aligned file nav info
"endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Format
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
scriptencoding utf-8
syntax on                       " syntax highlighting
syntax enable


filetype plugin indent on       " Each time a new or existing file is edited, Vim will try to recognize the type
                                " of the file and set the 'filetype' option.  This will trigger the FileType
                                " event, which can be used to set the syntax highlighting, set options, etc.

set foldenable                  " When off, all folds are open.
set formatoptions=tcq           " This is a sequence of letters which describes how automatic formatting
                                " is to be done.

set linebreak                   " If on Vim will wrap long lines at a character in
                                " 'breakat' rather than at the last character that fits on the screen.

set linespace=0                 " No extra spaces between rows.
                                " Number of pixel lines inserted between characters.  Useful if the font
                                " uses the full character cell height, making lines touch each other.

"set list                        " List mode: Show tabs as CTRL-I is displayed, display $ after end of
                                " line.  Useful to see the difference between tabs and spaces and for
                                " trailing blanks.  Further changed by the 'listchars' option.
"set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace

set tw=500                      " Maximum width of text that is being inserted.  A longer line will be
                                " broken after white space to get this width.

set wrap                        " This option changes how text is displayed.  It doesn't change the text
                                " in the buffer, see 'textwidth' for that.
                                " When on, lines longer than the width of the window will wrap and
                                " displaying continues on the next line.

set whichwrap=b,s,<,>,[,]       " Allow specified keys that move the cursor left/right to move to the
                                " previous/next line when the cursor is on the first/last character in
                                " the line.

set winminheight=0              " The minimal height of a window, when it's not the current window.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Indent and tab
"	There are four main ways to use tabs in Vim:
"	1. Always keep 'tabstop' at 8, set 'softtabstop' and 'shiftwidth' to 4
"	   (or 3 or whatever you prefer) and use 'noexpandtab'.  Then Vim
"	   will use a mix of tabs and spaces, but typing <Tab> and <BS> will
"	   behave like a tab appears every 4 (or 3) characters.
"	2. Set 'tabstop' and 'shiftwidth' to whatever you prefer and use
"	   'expandtab'.  This way you will always insert spaces.  The
"	   formatting will never be messed up when 'tabstop' is changed.
"	3. Set 'tabstop' and 'shiftwidth' to whatever you prefer and use a
"	   |modeline| to set these values when editing the file again.  Only
"	   works when using Vim to edit the file.
"	4. Always set 'tabstop' and 'shiftwidth' to the same value, and
"	   'noexpandtab'.  This should then work (for initial indents only)
"	   for any tabstop setting that people use.  It might be nice to have
"	   tabs after the first non-blank inserted as spaces if you do this
"	   though.  Otherwise aligned comments will be wrong when 'tabstop' is
"	   changed.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent                  " indent at the same level of the previous line
set smartindent                 " Do smart autoindenting when starting a new line.
                                " Works for C-like programs, but can also be used
                                " for other languages.
set cindent                     " Enables automatic C program indenting (Overrides samartindent).
set shiftwidth=2                " use indents of 3 spaces. Number of spaces to use for each step
                                " of (auto)indent.  Used for |'cindent'|, |>>|, |<<|, etc.
set expandtab                   " tabs are spaces, not tabs. In Insert mode: Use the appropriate
                                " number of spaces to insert a <Tab>.  Spaces are used in indents
                                " with the '>' and '<' commands and when 'autoindent' is on.
                                " To insert a real tab when 'expandtab' is on, use CTRL-V<Tab>.
set tabstop=8                   " Number of spaces that a <Tab> in the file counts for.
set softtabstop=2               " Number of spaces that a <Tab> counts for while performing
                                " editing operations, like inserting a <Tab> or using <BS>
set smarttab                    " When on, a <Tab> in front of a line inserts blanks according to
                                " 'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places.
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes). When non-empty, specifies
                                " the key sequence that toggles the 'paste' option.
set backspace=indent,eol,start  " backspace for dummies
                                " Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
                                " mode.  This is a list of items, separated by commas.  Each item allows
                                " a way to backspace over something:
                                " value         effect
                                " indent        allow backspacing over autoindent
                                " eol           allow backspacing over line breaks (join lines)
                                " start         allow backspacing over the start of insert; CTRL-W and CTRL-U
                                " stop once at the start of insert.


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Coding and file format
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set encoding=utf-8              " Sets the character encoding used inside Vim.
set fileformat=unix             " Default file types This gives the <EOL> of the current buffer, which
                                " is used for reading/writing the buffer from/to a file:
                                "dos    <CR> <NL>
                                "unix   <NL>
                                "mac    <CR>
set fileformats=unix            " This gives the end-of-line (<EOL>) formats that will be tried when
                                " starting to edit a new buffer and when reading a file into an existing buffer
set termencoding=utf-8          " Encoding used for the terminal.
set hidden                      " allow buffer switching without saving
set history=1000                " Store a ton of history (default is 20)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch                    " highlight search terms
set ignorecase                  " case insensitive search
set incsearch                   " find as you type search
set magic                       " Set magic on, for regular expressions. If a character is taken
                                " literally or not depends on the 'magic' option and the items mentioned next.
set smartcase                   " Override the 'ignorecase' option if the search pattern 
                                " contains upper case characters.
set showmatch                   " When a bracket is inserted, briefly jump to the matching one.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Tags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=./tags;,tags;

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Motion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set scrolljump=1                " lines to scroll when cursor leaves screen
set scrolloff=1                 " minimum lines to keep above and below cursor

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Session
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set sessionoptions=buffers,folds,help,tabpages,resize,winsize,winpos  " Changes the effect of the :mksession command.
set shortmess+=aoOtT             " This option helps to avoid all the hit-enter
                                 " prompts caused by file messages
set viewoptions=folds,options,cursor,unix,slash " Changes the effect of the :mkview command.
                                                " It is a comma separated list of words.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Autocompletion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildchar=<Tab>              " Character you have to type to start wildcard expansion in the command-line
set wildcharm=<C-Z>             " Character you have to type to start wildcard expansion in the command-line in macros
set wildmenu                    " show list instead of just completing
"set wildmode=list:longest,full  " Completion mode that is used, list matches, then longest common part, then all.
set wildmode=full  " Completion mode that is used, list matches, then longest common part, then all.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Backups
"'backup' 'writebackup'	action	~
"   off	     off	no backup made
"   off	     on		backup current file, deleted afterwards (default)
"   on	     off	delete old backup, backup current file
"   on	     on		delete old backup, backup current file
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set writebackup                 " Make a backup before overwriting a file.  The backup is removed after
                                " the file was successfully written, unless the 'backup' option is
                                " also on.
set backup                      " Make a backup before overwriting a file.
set backupdir=~/.vim/backup/


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"MAPS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"  you can also press F10 to open the buffer menu.
nnoremap <F10> :b <C-Z>

" Stupid shift key fixes
command! -bang -nargs=* -complete=file E e<bang> <args>
command! -bang -nargs=* -complete=file W w<bang> <args>
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>

" The following lets you type Ngb to jump to buffer number N (a number from 1 to 99). For example, typing 12gb would jump to buffer 12.
let c = 1
while c <= 99
  execute "nnoremap " . c . "gb :" . c . "b\<CR>"
  let c += 1
endwhile

"Leader in easier location
let mapleader = ','
""" Code folding options
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

"clearing highlighted search
nmap <silent> <leader>/ :nohlsearch<CR>
" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Adjust viewports to the same size
map <Leader>= <C-w>=

" => Moving around, tabs and buffers
" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <c-space> ?
map <silent> <leader><cr> :noh<cr>

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
"" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

" Mappings to access buffers (don't use "\p" because a
" delay before pressing "p" would accidentally paste).
" \l       : list buffers
" \b \f \g : go back/forward/last-used
" \1 \2 \3 : go to buffer 1/2/3 etc
nnoremap <Leader>l :ls<CR>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>f :bn<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

"" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
"
"" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

"map <F5> :TagbarToggle <CR>
nnoremap <silent> <F5> :TagbarToggle <CR>
nnoremap <F6> :buffers<CR>:buffer<Space>

" Activate Undo-tree plugin
nnoremap <silent> <F2> :UndotreeToggle<cr>

"Indentacion
vnoremap < <gv
vnoremap > >gv
vnoremap <TAB> >gv
vnoremap <S-TAB> <gv

"Tab navigation
nnoremap <F8> gT
nnoremap <F9> gt
"View navigation
nnoremap <C-F8> <C-w><Left>
nnoremap <C-F9> <C-w><Right>


" Para los comentarios y separadores
inoremap /** /*<Enter><Enter>/<Up><Space>
inoremap //- //------------------------------------------------------------------------------

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Map introduce selected text between simbols
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i
inoremap $t <><esc>i


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual block C++ and ADA comments
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap /* <esc>`>a*/<esc>`<i/*<esc>
vnoremap -- <esc>`<<c-v>`><S-I>--<esc>`>

runtime macros/matchit.vim
   " The following lines enable the macros/matchit.vim plugin for
   " Ada-specific extended matching with the % key.
   "
"   let s:notend      = '\%(\<end\s\+\)\@<!'
"   let b:match_words =
"      \ s:notend . '\<if\>:\<elsif\>:\<else\>:\<end\>\s\+\<if\>,' .
"      \ s:notend . '\<case\>:\<when\>:\<end\>\s\+\<case\>,' .
"      \ '\%(\<while\>.*\|\<for\>.*\|'.s:notend.'\)\<loop\>:\<end\>\s\+\<loop\>,' .
"      \ '\%(\<do\>\|\<begin\>\):\<exception\>:\<end\>\s*\%($\|[;A-Z]\),' .
"      \ s:notend . '\<record\>:\<end\>\s\+\<record\>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Netrw Directory Listing
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options for default vim directory navigator
let g:netrw_liststyle = 3
let g:netrw_banner = 1
let g:netrw_browse_split = 3
let g:netrw_winsize = 25
let g:Netrw_usetab = 1
nnoremap <F3> :Lexplore<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ada vim feature
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ada_standard_types = 1 " Color for standar types like integer, natural ...

"let g:ada_space_errors = 1
"		Highlight extraneous errors in spaces ...
"		g:ada_no_trail_space_error
"		    - but ignore trailing spaces at the end of a line
"		g:ada_no_tab_space_error
"		    - but ignore tabs after spaces
"		g:ada_all_tab_usage
"		    - highlight all tab use
"
"							   *g:ada_line_errors*
"let g:ada_line_errors = 1
"		Highlight lines which are too long. Note: This highlighting
"		option is quite CPU intensive.
"
"							 *g:ada_rainbow_color*
"let g:ada_rainbow_color = 1
"		Use rainbow colours for '(' and ')'. You need the
"		rainbow_parenthesis for this to work.
"
"							       *g:ada_folding*
"let g:ada_folding = 'gx'
"                set ('sigpft')
"		Use folding for Ada sources.
"		    's':    activate syntax folding on load
"			'p':    fold packages
"			'f':    fold functions and procedures
"			't':    fold types
"			'c':    fold conditionals
"		    'g':    activate gnat pretty print folding on load
"			'i':    lone 'is' folded with line above
"			'b':	lone 'begin' folded with line above
"			'p':	lone 'private' folded with line above
"			'x':	lone 'exception' folded with line above
"		    'i':    activate indent folding on load
"
"		Note: Syntax folding is in an early (unusable) stage and
"		      indent or gnat pretty folding is suggested.
"
"		For gnat pretty folding to work the following settings are
"		suggested: -cl3 -M79 -c2 -c3 -c4 -A1 -A2 -A3 -A4 -A5
"
"		For indent folding to work the following settings are
"		suggested: shiftwidth=3 softtabstop=3
"
"								*g:ada_abbrev*
"g:ada_abbrev		  bool (true when exists)
"		Add some abbreviations. This feature is more or less superseded
"		by the various completion methods.
"
"						      *g:ada_withuse_ordinary*
"let g:ada_withuse_ordinary = 1
"		Show "with" and "use" as ordinary keywords (when used to
"		reference other compilation units they're normally highlighted
"		specially).
"
"							 *g:ada_begin_preproc*
"let g:ada_begin_preproc = 1
"		Show all begin-like keywords using the colouring of C
"		preprocessor commands.
"
"						    *g:ada_omni_with_keywords*
let g:ada_omni_with_keywords = 1
"		Add Keywords, Pragmas, Attributes to omni-completions
"		(|compl-omni|). Note: You can always complete then with user
"		completion (|i_CTRL-X_CTRL-U|).
"
"						      *g:ada_extended_tagging*
let g:ada_extended_tagging = 'jump'
"		use extended tagging, two options are available
"		    'jump': use tjump to jump.
"		    'list': add tags quick fix list.
"		Normal tagging does not support function or operator
"		overloading as these features are not available in C and
"		tagging was originally developed for C.
"
"						   *g:ada_extended_completion*
"let g:ada_extended_completion = 1
"		Uses extended completion for <C-N> and <C-R> completions
"		(|i_CTRL-N|). In this mode the '.' is used as part of the
"		identifier so that 'Object.Method' or 'Package.Procedure' are
"		completed together.
"
"						       *g:ada_gnat_extensions*
let g:ada_gnat_extensions = 1
"		 Support GNAT extensions.
"
"					       *g:ada_with_gnat_project_files*
"
let g:ada_with_gnat_project_files = 1
"		 Add gnat project file keywords and Attributes.
"
"						      *g:ada_default_compiler*
"g:ada_default_compiler	  string
"		set default compiler. Currently supported are 'gnat' and
"		'decada'.


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins extra options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline plugin
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1              " Needed use powerline fonts (for example hack font).
                                               " This option will automatically populate the
                                               " g:airline_symbols dictionary with the powerline symbols.

" Neosnippet
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

"Installing default snippets is optional. If choose not to install them, you must deactivate them with
"let g:neosnippet#disable_runtime_snippets = 1

" Enable snipMate compatibility feature.
"let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
"let g:neosnippet#snippets_directory='~/.vim/pack/snipmate/start/vim-snippets-master/snippets'

" Syntastic plugin
" ----------------
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ada_compiler_options = "-Wall -gnatwA"
highlight SyntasticErrorLine guibg=#2f0000
highlight SyntasticStyleErrorLine guibg=#74741C
highlight SyntasticError guibg=#2f0000
