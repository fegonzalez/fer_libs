# ==============================================================================
# SUMMARY (following the order in "The ANSI C Programming Language" [3.1] )
# ==============================================================================

# I. The Valgrind Quick Start Guide
#
# 1. Introduction
# 2. Preparing your program
# 3. Running your program under Memcheck
# 4. Interpreting Memcheck's output
# 5. Caveats
# 6. More information

# Appendix Z - References


# ==============================================================================
# I. The Valgrind Quick Start Guide [1_1]
# ==============================================================================


2) Preparing your program

a) Compiling with Debug info
   
   Compile your program with -g  (Makefile: DEBUG_FLAGS = -g)

b) compiling with Optimization

   Using -O0 is also a good idea (Makefile: OPTIM_FLAGS = -O0 # the default)
  
   With -O1 line numbers in error messages can be inaccurate, although
   generally speaking running Memcheck on code compiled at -O1 works
   fairly well, and the speed improvement compared to running -O0 is
   quite significant.

   Use of -O2 and above is not recommended as Memcheck occasionally
   reports uninitialised-value errors which don't really exist.


3. Running your program under Memcheck

If you normally run your program like this:

>  myprog arg1 arg2

Use this command line:

>  valgrind --leak-check=yes myprog arg1 arg2

# Memcheck is the default tool.
# The --leak-check option turns on the detailed memory leak detector.


4. Interpreting Memcheck's output
 
[ Example

  #include <stdlib.h>

  void f(void)
  {
     int* x = malloc(10 * sizeof(int));
     x[10] = 0;        // problem 1: heap block overrun
  }                    // problem 2: memory leak -- x not freed

  int main(void)
  {
     f();
     return 0;
  }

end example ]


4.1 memory error

1) memory error messages look like this:

  ==19182== Invalid write of size 4
  ==19182==    at 0x804838F: f (example.c:6)
  ==19182==    by 0x80483AB: main (example.c:11)
  ==19182==  Address 0x1BA45050 is 0 bytes after a block of size 40 alloc'd
  ==19182==    at 0x1B8FF5CD: malloc (vg_replace_malloc.c:130)
  ==19182==    by 0x8048385: f (example.c:5)
  ==19182==    by 0x80483AB: main (example.c:11)
  ...


2) It's worth fixing errors in the order they are reported, as later
   errors can be caused by earlier errors. Failing to do this is a
   common cause of difficulty with Memcheck.


4.2 memory leak.

1) Memory leak messages look like this:

  ==19182== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
  ==19182==    at 0x1B8FF5CD: malloc (vg_replace_malloc.c:130)
  ==19182==    by 0x8048385: f (a.c:5)
  ==19182==    by 0x80483AB: main (a.c:11)

2) The stack trace tells you where the leaked memory was allocated, (x
   in this example). Memcheck cannot tell you why the memory leaked,
   unfortunately.

3) There are several kinds of leaks; the two most important categories are:

"definitely lost" your program is leaking memory -- fix it!

"probably lost": your program is leaking memory, unless you're doing
	  	 funny things with pointers (such as moving them to
	  	 point to the middle of a heap block).


4.3  uninitialised values

1) Memcheck also reports uses of uninitialised values, most commonly with
   the message "Conditional jump or move depends on uninitialised value(s)".

2) It can be difficult to determine the root cause of these
   errors. Try using the --track-origins=yes to get extra information.


5. Caveats

Memcheck is not perfect; it occasionally produces false positives, and
there are mechanisms for suppressing these (see Suppressing errors in
the Valgrind User Manual). However, it is typically right 99% of the time.


# ==============================================================================
# Appendix Z - References
# ==============================================================================


# ------------------------------------------------------------------------------

[1] Official doc - http://valgrind.org/

[1_1] The Valgrind Quick Start Guide -
      http://valgrind.org/docs/manual/QuickStart.html


