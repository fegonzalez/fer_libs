# 1) Start gdb session in emacs
#
# 2) gdb session commands
#    2.1) howto change the path to a remote host (set substitute-path)
#    2.2) start debug
#    2.3) create/remove breakpoints
#    	  2.3.1) breakpoint al nombre de una función
#    2.4) basic commands
#
# 3) [Example system_test
#
# 4) Debugging binaries (.so, ...)



################################################################################
# 1) Start gdb session in emacs
################################################################################

# Inside emacs:

# 2014:

ALT-X
  gdb path (relative or absolute) to the binary file to debug
  # i.e. 
  gdb ../../.object/simdebug/systems/system_name/system_test

M-x
  gdb-many-windows


(gdb) attach <pid>


# 2016

# one debug
ALT-X
  gdb -i=mi <path-exec_file>

# OR

# debug session
ALT-X
  gdb

# debug one exec-file ...
(gdb) file <path-exec_file>


# ... and debug another exec-file ...
(gdb) file <path-another-exec_file>


M-x
  gdb-many-windows


################################################################################
# 2) gdb session commands
#
# (inside gdb)
################################################################################

# 2.1) howto change the path to a remote host (set substitute-path)

(gdb) set substitute-path /home/aw159/pruebas/USERNAME /home/aw159pru


# 2.2) start debug
(gdb) file <exec_name>
(gdb) start 


# 2.3 create/remove breakpoints

# a) on-screen mode:  clicking over the shadowed margin 

(gdb) add CTRL-X ESPACIO
(gdb) remove  (CTRL-X CTRL-A CTRL-D)

# b) command-line mode

(gdb) break file.cpp:95

# 2.3.1) breakpoint al nombre de una función

(gdb) b FPRcvDispatcher::notifyFP

#    2.4) basic commands

(gdb) help

(gdb) next

(gdb) step

(gdb) cont

(gdb) kill

(gdb) attach / detach


################################################################################
# 3) [Example system_test
################################################################################

#Run gdb (like this): gdb --annotate=3
 ../../.object/simdebug/systems/system_name/system_test

(gdb) break file2.cpp:23

- end Example]


################################################################################
# 4) Debugging binaries (.so, ...)
################################################################################

[doc_1] https://reverseengineering.stackexchange.com/questions/1935/how-to-handle-stripped-binaries-with-gdb-no-source-no-symbols-and-gdb-only-sho


# 4.1.- path  (see 1 above)

OPTION-1: dos pasos = dbg proceso + attach pid

ALT-X
  gdb -i=mi <path-exec_file>

(gdb) attach <file-pid>

OPTION-2: un paso: desde consola / emacs 

>> gdb -  <file-pid>


# 4.2  Breakpoints en la librería

# Se puede hacer directamente (ver 2.3.1)

(gdb) b FPRcvDispatcher::notifyFP
(gdb) b FPRcvDispatcher.cc:229


# 4.3 info del binario

(gdb) info file

